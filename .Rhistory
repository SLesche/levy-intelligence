library(tidyverse)
model_results <- read.csv("data/levy_data/results/levy_mat_parameters.csv") %>%
mutate(
Subject = parse_number(sub)
)
intelligence_results <- read.csv2("data/iq_data/ERPData.csv")
data <- model_results %>%
left_join(., intelligence_results) %>%
mutate(across(-c(task, sub, condition), as.numeric))
params <- c("a", "v", "t", "st", "alpha")
intelligence <- c("APModd", "APMeven", "PS", "PC", "M", "C")
get_correlation <- function(data){
cors = cor(data[, intelligence], data[, params], use = "pairwise.complete.obs")
return(cors)
}
nested_data <- data %>%
group_by(task, condition) %>%
nest() %>%
mutate(
cors = map(data, get_correlation)
)
results <- data.frame()
for (irow in 1:nrow(nested_data)){
df = as.data.frame(nested_data$cors[[irow]])
df$task = nested_data$task[irow]
df$condition = nested_data$condition[irow]
results = rbind(results, df)
}
results <- results %>%
mutate(
measure = rownames(.)
) %>%
pivot_longer(
cols = c("a", "v", "t", "st", "alpha"),
names_to = "param",
values_to = "cor"
)
results %>%
ggplot(
aes(
x = cor,
fill = param,
)
)+
geom_boxplot()+
theme_classic()
results %>%
ggplot(
aes(
x = cor,
fill = param,
)
)+
geom_violin()+
theme_classic()
results %>%
ggplot(
aes(
x = param,
y = cor,
fill = param,
)
)+
geom_boxplot()+
theme_classic()
data$APM = data$APMeven + data$APModd
intelligence <- c("APM")
get_correlation <- function(data){
cors = cor(data[, intelligence], data[, params], use = "pairwise.complete.obs")
return(cors)
}
nested_data <- data %>%
group_by(task, condition) %>%
nest() %>%
mutate(
cors = map(data, get_correlation)
)
results <- data.frame()
for (irow in 1:nrow(nested_data)){
df = as.data.frame(nested_data$cors[[irow]])
df$task = nested_data$task[irow]
df$condition = nested_data$condition[irow]
results = rbind(results, df)
}
results <- results %>%
mutate(
measure = rownames(.)
) %>%
pivot_longer(
cols = c("a", "v", "t", "st", "alpha"),
names_to = "param",
values_to = "cor"
)
results %>%
ggplot(
aes(
x = param,
y = cor,
fill = param,
)
)+
geom_boxplot()+
theme_classic()
hist(data$alpha)
results %>%
ggplot(
aes(
x = param,
y = cor,
fill = param,
)
)+
geom_boxplot()+
theme_classic()
# intelligence <- c("APM")
intelligence <- c("APM", "PS", "PC", "M", "C")
get_correlation <- function(data){
cors = cor(data[, intelligence], data[, params], use = "pairwise.complete.obs")
return(cors)
}
nested_data <- data %>%
group_by(task, condition) %>%
nest() %>%
mutate(
cors = map(data, get_correlation)
)
results <- data.frame()
for (irow in 1:nrow(nested_data)){
df = as.data.frame(nested_data$cors[[irow]])
df$task = nested_data$task[irow]
df$condition = nested_data$condition[irow]
results = rbind(results, df)
}
results <- results %>%
mutate(
measure = rownames(.)
) %>%
pivot_longer(
cols = c("a", "v", "t", "st", "alpha"),
names_to = "param",
values_to = "cor"
)
results %>%
ggplot(
aes(
x = param,
y = cor,
fill = param,
)
)+
geom_boxplot()+
theme_classic()
results
results %>%
ggplot(
aes(
x = param,
y = cor,
fill = param,
)
)+
facet_wrap(~measure)+
geom_boxplot()+
theme_classic()
results <- data.frame()
for (irow in 1:nrow(nested_data)){
df = as.data.frame(nested_data$cors[[irow]])
df$task = nested_data$task[irow]
df$condition = nested_data$condition[irow]
results = rbind(results, df)
}
results
results <- results %>%
mutate(
measure = rownames(.)
) %>%
mutate(
measure = str_remove(measure, "\\+$")
) %>%
pivot_longer(
cols = c("a", "v", "t", "st", "alpha"),
names_to = "param",
values_to = "cor"
)
results %>%
ggplot(
aes(
x = param,
y = cor,
fill = param,
)
)+
facet_wrap(~measure)+
geom_boxplot()+
theme_classic()
results <- results %>%
mutate(
measure = rownames(.)
) %>%
mutate(
measure = str_remove(measure, "\\+$")
) %>%
pivot_longer(
cols = c("a", "v", "t", "st", "alpha"),
names_to = "param",
values_to = "cor"
)
results <- data.frame()
for (irow in 1:nrow(nested_data)){
df = as.data.frame(nested_data$cors[[irow]])
df$task = nested_data$task[irow]
df$condition = nested_data$condition[irow]
results = rbind(results, df)
}
results <- results %>%
mutate(
measure = rownames(.)
) %>%
mutate(
measure = str_remove(measure, "\\+$")
) %>%
pivot_longer(
cols = c("a", "v", "t", "st", "alpha"),
names_to = "param",
values_to = "cor"
)
results
results %>%
ggplot(
aes(
x = param,
y = cor,
fill = param,
)
)+
facet_wrap(~measure)+
geom_boxplot()+
theme_classic()
results = rbind(results, df)
results <- data.frame()
for (irow in 1:nrow(nested_data)){
df = as.data.frame(nested_data$cors[[irow]])
df$task = nested_data$task[irow]
df$condition = nested_data$condition[irow]
results = rbind(results, df)
}
results <- results %>%
mutate(
measure = rownames(.)
) %>%
mutate(
measure = str_remove(measure, "\\+$")
) %>%
pivot_longer(
cols = c("a", "v", "t", "st", "alpha"),
names_to = "param",
values_to = "cor"
)
results
results %>% distinct(measure)
results <- results %>%
mutate(
measure = rownames(.)
) %>%
mutate(
measure = str_remove(measure, "\\d+$")
) %>%
pivot_longer(
cols = c("a", "v", "t", "st", "alpha"),
names_to = "param",
values_to = "cor"
)
results <- data.frame()
for (irow in 1:nrow(nested_data)){
df = as.data.frame(nested_data$cors[[irow]])
df$task = nested_data$task[irow]
df$condition = nested_data$condition[irow]
results = rbind(results, df)
}
results <- results %>%
mutate(
measure = rownames(.)
) %>%
mutate(
measure = str_remove(measure, "\\d+$")
) %>%
pivot_longer(
cols = c("a", "v", "t", "st", "alpha"),
names_to = "param",
values_to = "cor"
)
results %>% distinct(measure)
results %>%
ggplot(
aes(
x = param,
y = cor,
fill = param,
)
)+
facet_wrap(~measure)+
geom_boxplot()+
theme_classic()
results %>%
ggplot(
aes(
x = param,
y = cor,
fill = param,
)
)+
facet_wrap(~measure)+
geom_boxplot()+
theme_classic()+
geom_hline(yintercept = 0, color = "red")
devtools::install_github("SLesche/psysl")
tinytex::reinstall_tinytex(repository = "illinois")
library(tidyverse)
library(glue)
library(lavaan)
library(tidySEM)
get_names <- function(names, pattern){
matches = names[stringr::str_detect(names, pattern)]
return(matches)
}
model_results <- read.csv("data/levy_data/results/levy_mat_parameters.csv") %>%
mutate(
Subject = parse_number(sub)
)
params <- c("a", "v", "t", "st", "alpha")
intelligence <- c("APModd", "APMeven", "PS", "PC", "M", "C")
wide_model <- model_results %>%
pivot_wider(
names_from = c(task, condition),
values_from = params
) %>%
select(-sub)
intelligence_results <- read.csv2("data/iq_data/ERPData.csv")
data <- wide_model %>%
left_join(., intelligence_results) %>%
mutate(across(everything(), as.numeric))
a_vars <- get_names(names(wide_model), "^a_")
v_vars <- get_names(names(wide_model), "^v_")
t_vars <- get_names(names(wide_model), "^t_")
st_vars <- get_names(names(wide_model), "^st_")
alpha_vars <- get_names(names(wide_model), "^alpha_")
sternberg_vars <- get_names(names(wide_model), "sternberg")
posner_vars <- get_names(names(wide_model), "posner")
hick_vars <- get_names(names(wide_model), "hick")
psych::fa.parallel(
data[, t_vars],
fa = "fa",
fm = "ml"
)
psych::fa.parallel(
data[, intelligence],
fa = "fa",
fm = "ml"
)
# Construct measurement models using glue
a_factor <- glue::glue("
# Boundary Separation Model
a =~ {paste(a_vars, collapse = ' + ')}
")
v_factor <- glue::glue("
# Drift Rate Model
v =~ {paste(v_vars, collapse = ' + ')}
")
t_factor <- glue::glue("
# non-decision time Model
t =~ {paste(t_vars, collapse = ' + ')}
")
st_factor <- glue::glue("
# sd of non-decision time Model
st =~ {paste(st_vars, collapse = ' + ')}
")
alpha_factor <- glue::glue("
# non-decision time Model
alpha =~ {paste(alpha_vars, collapse = ' + ')}
")
sternberg_factor <- glue(
"
# Measurement factor for sternberg
sternberg =~ {paste(sternberg_vars, collapse = ' + ')}
"
)
hick_factor <- glue(
"
# Measurement factor for hick
hick =~ {paste(hick_vars, collapse = ' + ')}
"
)
posner_factor <- glue(
"
# Measurement factor for posner
posner =~ {paste(posner_vars, collapse = ' + ')}
"
)
g_factor <- "
# Intelligence measurement model
bis =~ PS + PC + M + C
apm =~ APMeven + APModd
g =~ bis + apm
"
posner_vars
g_factor <- "
# Intelligence measurement model
bis =~ PS + PC + M + C
apm =~ APMeven + APModd
g =~ bis + apm
"
base_model_alpha <- glue(
"
{g_factor}
{alpha_factor}
g ~~ alpha
"
)
test <- sem(model = base_model_alpha, data=data, std.ov =TRUE, estimator = "ML",missing="fiml")
summary(test, fit.measures = TRUE, standardized = TRUE)
graph_sem(test)
base_model_v <- glue(
"
{g_factor}
{v_factor}
g ~~ v
"
)
test <- sem(model = base_model_v, data=data, std.ov =TRUE, estimator = "ML",missing="fiml")
summary(test, fit.measures = TRUE, standardized = TRUE)
graph_sem(test)
test <- sem(model = base_model_alpha, data=data, std.ov =TRUE, estimator = "ML",missing="fiml")
summary(test, fit.measures = TRUE, standardized = TRUE)
?sem
data
get_correlation <- function(data){
cors = cor(data[, intelligence], data[, params], use = "pairwise.complete.obs")
return(cors)
}
nested_data <- data %>%
group_by(task, condition) %>%
nest() %>%
mutate(
cors = map(data, get_correlation)
)
model_results <- read.csv("data/levy_data/results/levy_mat_parameters.csv") %>%
mutate(
Subject = parse_number(sub)
)
intelligence_results <- read.csv2("data/iq_data/ERPData.csv")
data <- model_results %>%
left_join(., intelligence_results) %>%
mutate(across(-c(task, sub, condition), as.numeric))
data$APM = data$APMeven + data$APModd
params <- c("a", "v", "t", "st", "alpha")
# intelligence <- c("APM")
intelligence <- c("APM", "PS", "PC", "M", "C")
get_correlation <- function(data){
cors = cor(data[, intelligence], data[, params], use = "pairwise.complete.obs")
return(cors)
}
nested_data <- data %>%
group_by(task, condition) %>%
nest() %>%
mutate(
cors = map(data, get_correlation)
)
results <- data.frame()
for (irow in 1:nrow(nested_data)){
df = as.data.frame(nested_data$cors[[irow]])
df$task = nested_data$task[irow]
df$condition = nested_data$condition[irow]
results = rbind(results, df)
}
results <- results %>%
mutate(
measure = rownames(.)
) %>%
mutate(
measure = str_remove(measure, "\\d+$")
) %>%
pivot_longer(
cols = c("a", "v", "t", "st", "alpha"),
names_to = "param",
values_to = "cor"
)
results %>%
ggplot(
aes(
x = param,
y = cor,
fill = param,
)
)+
facet_wrap(~measure)+
geom_boxplot()+
theme_classic()+
geom_hline(yintercept = 0, color = "red")
