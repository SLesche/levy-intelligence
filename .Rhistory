lm = lm(APM ~ a + t + v + st + alpha, data = data)
return(lm)
}
nested_data <- data %>%
group_by(task, condition) %>%
nest() %>%
mutate(
cors = map(data, get_correlation),
lm = map(data, run_lm)
)
results <- data.frame()
for (irow in 1:nrow(nested_data)){
df = as.data.frame(nested_data$cors[[irow]])
df$task = nested_data$task[irow]
df$condition = nested_data$condition[irow]
results = rbind(results, df)
}
results <- results %>%
mutate(
measure = rownames(.)
) %>%
mutate(
measure = str_remove(measure, "\\d+$")
) %>%
pivot_longer(
cols = c("a", "v", "t", "st", "alpha"),
names_to = "param",
values_to = "cor"
)
plot_by_measure <- results %>%
ggplot(
aes(
x = param,
y = cor,
fill = param,
)
)+
facet_wrap(~measure)+
geom_boxplot()+
theme_classic()+
geom_hline(yintercept = 0, color = "red")
plot_by_measure
summary(alpha_g, fit.measures = TRUE)
summary(alpha_g, fit.measures = TRUE) %>% str()
View(v_g)
test <- summary(alpha_g, fit.measures = TRUE)
View(test)
apa_print(test)
papaja::apa_print(test)
papaja::apa_print(v_g)
sem_object = alpha_g
sem_sum = summary(sem_object)
View(sem_sum)
sem_sum = summary(sem_object, fit.measures = TRUE)
View(sem_sum)
df = sem_sum[["fit"]][["df"]]
chisq = sem_sum[["fit"]][["chisq"]]
cfi = sem_sum[["fit"]][["cfi"]]
rmsea = sem_sum[["fit"]][["rmsea"]]
p = sem_sum[["fit"]][["pvalue"]]
papaja::apa_p(p)
print_sem <- function(sem_object){
sem_sum = summary(sem_object, fit.measures = TRUE)
df = sem_sum[["fit"]][["df"]]
chisq = sem_sum[["fit"]][["chisq"]]
cfi = sem_sum[["fit"]][["cfi"]]
rmsea = sem_sum[["fit"]][["rmsea"]]
p = sem_sum[["fit"]][["pvalue"]]
message = paste0(
"$\chi^2(",
print_sem <- function(sem_object){
sem_sum = summary(sem_object, fit.measures = TRUE)
df = sem_sum[["fit"]][["df"]]
chisq = sem_sum[["fit"]][["chisq"]]
cfi = sem_sum[["fit"]][["cfi"]]
rmsea = sem_sum[["fit"]][["rmsea"]]
p = sem_sum[["fit"]][["pvalue"]]
message = paste0(
"$\\chi^2(",
df,
") = ",
round(chisq, 2),
",",
papaja::apa_p(p),
", CFI = ",
round(cfi, 2),
", RMSEA = ",
round(rmsea, 2),
"$"
)
return(message)
}
print_sem(alpha_g)
View(alpha_g)
View(test)
library(tidyverse)
library(glue)
library(lavaan)
library(semPlot)
get_names <- function(names, pattern){
matches = names[stringr::str_detect(names, pattern)]
return(matches)
}
model_results <- read.csv("data/levy_data/results/levy_mat_parameters.csv") %>%
mutate(
Subject = parse_number(sub)
)
params <- c("a", "v", "t", "st", "alpha")
intelligence <- c("APModd", "APMeven", "PS", "PC", "M", "C")
wide_model <- model_results %>%
pivot_wider(
names_from = c(task, condition),
values_from = params
) %>%
select(-sub)
intelligence_results <- read.csv2("data/iq_data/ERPData.csv")
data <- wide_model %>%
left_join(., intelligence_results) %>%
mutate(across(everything(), as.numeric)) %>%
mutate(APM = APMeven + APModd) %>%
mutate(across(everything(), ~scale(.)[, 1]))
a_vars <- get_names(names(wide_model), "^a_")
v_vars <- get_names(names(wide_model), "^v_")
t_vars <- get_names(names(wide_model), "^t_")
st_vars <- get_names(names(wide_model), "^st_")
alpha_vars <- get_names(names(wide_model), "^alpha_")
sternberg_vars <- get_names(names(wide_model), "sternberg")
posner_vars <- get_names(names(wide_model), "posner")
hick_vars <- get_names(names(wide_model), "hick")
psych::fa.parallel(
data[, intelligence],
fa = "fa",
fm = "ml"
)
g_factor <- "
# Intelligence measurement model
bis =~ PC + PS + M + C
apm =~ 1*APMeven + 1*APModd
g =~ 1*bis + 1*apm
"
true_g_factor <- "
g=~ PC + PS + C + M + APM
PC ~ 0*1
PS ~ 0*1
C ~ 0*1
M ~ 0*1
APM ~ 0*1
"
cor(data[, intelligence], use = "pairwise.complete.obs")
intelligence_model <- sem(model = true_g_factor, data = data, estimator = "ML")
summary(intelligence_model, fit.measures = TRUE, standardized = TRUE)
alpha_factor <- glue::glue("
# non-decision time Model
alpha =~ {paste(alpha_vars, collapse = ' + ')}
alpha_sternberg_s1 ~~ s.alpha*alpha_sternberg_s1
alpha_sternberg_s3 ~~ s.alpha*alpha_sternberg_s3
alpha_sternberg_s5 ~~ s.alpha*alpha_sternberg_s5
alpha_hick_0bit ~~ h.alpha*alpha_hick_0bit
alpha_hick_1bit ~~ h.alpha*alpha_hick_1bit
alpha_hick_2bit ~~ h.alpha*alpha_hick_2bit
alpha_posner_ni ~~ p.alpha*alpha_posner_ni
alpha_posner_pi ~~ p.alpha*alpha_posner_pi
sternberg =~ sload.alpha*alpha_sternberg_s1 + sload.alpha*alpha_sternberg_s3 + sload.alpha*alpha_sternberg_s5
# hick =~ alpha_hick_0bit + alpha_hick_1bit + alpha_hick_2bit
posner =~ pload.alpha*alpha_posner_ni + pload.alpha*alpha_posner_pi
# hick ~~ 0*alpha
posner ~~ 0*alpha
sternberg ~~ 0*alpha
{paste(c(alpha_vars, ''), collapse = ' ~ 0*1\n')}
")
alpha_model <- sem(alpha_factor, data = data, std.ov = TRUE, estimator = "ML", missing = "fiml")
summary(alpha_model, fit.measures = TRUE, standardized = TRUE)
v_factor <- glue::glue("
# non-decision time Model
v =~ {paste(v_vars, collapse = ' + ')}
v_sternberg_s1 ~~ s.v*v_sternberg_s1
v_sternberg_s3 ~~ s.v*v_sternberg_s3
v_sternberg_s5 ~~ s.v*v_sternberg_s5
v_hick_0bit ~~ h.v*v_hick_0bit
v_hick_1bit ~~ h.v*v_hick_1bit
v_hick_2bit ~~ h.v*v_hick_2bit
v_posner_ni ~~ p.v*v_posner_ni
v_posner_pi ~~ p.v*v_posner_pi
sternberg =~ sload.v*v_sternberg_s1 + sload.v*v_sternberg_s3 + sload.v*v_sternberg_s5
# hick =~ v_hick_0bit + v_hick_1bit + v_hick_2bit
posner =~ pload.v*v_posner_ni + pload.v*v_posner_pi
# hick ~~ 0*v
posner ~~ 0*v
sternberg ~~ 0*v
{paste(c(v_vars, ''), collapse = ' ~ 0*1\n')}
")
v_model <- sem(v_factor, data = data, std.ov = TRUE, estimator = "ML", missing = "fiml")
summary(v_model, fit.measures = TRUE, standardized = TRUE)
full_combined_model <- glue::glue(
"
{alpha_factor}
{v_factor}
{true_g_factor}
g ~~ v + alpha
sternberg ~~ posner
"
)
combined_model <- glue::glue(
"
{alpha_factor}
{true_g_factor}
g ~~ alpha
sternberg ~~ posner
"
)
v_combined_model <- glue::glue(
"
{v_factor}
{true_g_factor}
g ~~ v
sternberg ~~ posner
"
)
alpha_g <- sem(model = combined_model, data=data, std.ov =TRUE, estimator = "ML", orthogonal = TRUE)
summary(alpha_g, fit.measures = TRUE, standardized = TRUE)
get_names <- function(names, pattern){
matches = names[stringr::str_detect(names, pattern)]
return(matches)
}
model_results <- read.csv("data/levy_data/results/levy_mat_parameters.csv") %>%
mutate(
Subject = parse_number(sub)
)
params <- c("a", "v", "t", "st", "alpha")
intelligence <- c("APModd", "APMeven", "PS", "PC", "M", "C")
wide_model <- model_results %>%
pivot_wider(
names_from = c(task, condition),
values_from = params
) %>%
select(-sub)
intelligence_results <- read.csv2("data/iq_data/ERPData.csv")
full_combined_model <- glue::glue(
"
{alpha_factor}
{v_factor}
{true_g_factor}
g ~~ v + alpha
sternberg ~~ posner
"
)
combined_model <- glue::glue(
"
{alpha_factor}
{true_g_factor}
g ~~ alpha
sternberg ~~ posner
"
)
v_combined_model <- glue::glue(
"
{v_factor}
{true_g_factor}
g ~~ v
sternberg ~~ posner
"
)
alpha_g <- sem(model = combined_model, data=data, std.ov =TRUE, estimator = "ML", orthogonal = TRUE)
summary(alpha_g, fit.measures = TRUE, standardized = TRUE)
v_g <- sem(model = v_combined_model, data=data, std.ov =TRUE, estimator = "ML", orthogonal = TRUE)
summary(v_g, fit.measures = TRUE, standardized = TRUE)
full_g <- sem(model = full_combined_model, data=data, std.ov =TRUE, estimator = "ML", orthogonal = TRUE)
summary(full_g, fit.measures = TRUE, standardized = TRUE)
hist(model_results$alpa)
hist(as.numeric(model_results$alpa))
as.numeric(model_results$alpa)
model_results
str(model_results$alpga)
str(model_results$alpha)
plot(model_results$alpha, model_results$v)
hist(model_results$alpa)
hist(model_results$alpha)
hist(model_results$v)
plot(data$alpha_sternberg_s3, data$APM)
plot(data$alpha_sternberg_s5, data$APM)
plot(data$alpha_posner_pi, data$APM)
alpha_g
summary(alpha_g, fit.measures = TRUE, standardized = TRUE)
View(data)
library(tidyverse)
library(glue)
library(lavaan)
get_names <- function(names, pattern){
matches = names[stringr::str_detect(names, pattern)]
return(matches)
}
model_results <- read.csv("data/levy_data/results/levy_mat_parameters.csv") %>%
mutate(
Subject = parse_number(sub)
)
params <- c("a", "v", "t", "st", "alpha")
intelligence <- c("APModd", "APMeven", "PS", "PC", "M", "C")
wide_model <- model_results %>%
pivot_wider(
names_from = c(task, condition),
values_from = params
) %>%
select(-sub)
intelligence_results <- read.csv2("data/iq_data/ERPData.csv")
data <- wide_model %>%
left_join(., intelligence_results) %>%
mutate(across(everything(), as.numeric)) %>%
mutate(APM = APMeven + APModd) %>%
mutate(across(everything(), ~scale(.)[, 1]))
a_vars <- get_names(names(wide_model), "^a_")
v_vars <- get_names(names(wide_model), "^v_")
t_vars <- get_names(names(wide_model), "^t_")
st_vars <- get_names(names(wide_model), "^st_")
alpha_vars <- get_names(names(wide_model), "^alpha_")
sternberg_vars <- get_names(names(wide_model), "sternberg")
posner_vars <- get_names(names(wide_model), "posner")
hick_vars <- get_names(names(wide_model), "hick")
psych::fa.parallel(
data[, intelligence],
fa = "fa",
fm = "ml"
)
g_factor <- "
# Intelligence measurement model
bis =~ PC + PS + M + C
apm =~ 1*APMeven + 1*APModd
g =~ 1*bis + 1*apm
"
true_g_factor <- "
g=~ PC + PS + C + M + APM
PC ~ 0*1
PS ~ 0*1
C ~ 0*1
M ~ 0*1
APM ~ 0*1
"
cor(data[, intelligence], use = "pairwise.complete.obs")
intelligence_model <- sem(model = true_g_factor, data = data, estimator = "ML")
summary(intelligence_model, fit.measures = TRUE, standardized = TRUE)
alpha_factor <- glue::glue("
# non-decision time Model
alpha =~ {paste(alpha_vars, collapse = ' + ')}
alpha_sternberg_s1 ~~ s.alpha*alpha_sternberg_s1
alpha_sternberg_s3 ~~ s.alpha*alpha_sternberg_s3
alpha_sternberg_s5 ~~ s.alpha*alpha_sternberg_s5
alpha_hick_0bit ~~ h.alpha*alpha_hick_0bit
alpha_hick_1bit ~~ h.alpha*alpha_hick_1bit
alpha_hick_2bit ~~ h.alpha*alpha_hick_2bit
alpha_posner_ni ~~ p.alpha*alpha_posner_ni
alpha_posner_pi ~~ p.alpha*alpha_posner_pi
sternberg =~ sload.alpha*alpha_sternberg_s1 + sload.alpha*alpha_sternberg_s3 + sload.alpha*alpha_sternberg_s5
# hick =~ alpha_hick_0bit + alpha_hick_1bit + alpha_hick_2bit
posner =~ pload.alpha*alpha_posner_ni + pload.alpha*alpha_posner_pi
# hick ~~ 0*alpha
posner ~~ 0*alpha
sternberg ~~ 0*alpha
{paste(c(alpha_vars, ''), collapse = ' ~ 0*1\n')}
")
alpha_model <- sem(alpha_factor, data = data, std.ov = TRUE, estimator = "ML", missing = "fiml")
summary(alpha_model, fit.measures = TRUE, standardized = TRUE)
v_factor <- glue::glue("
# non-decision time Model
v =~ {paste(v_vars, collapse = ' + ')}
v_sternberg_s1 ~~ s.v*v_sternberg_s1
v_sternberg_s3 ~~ s.v*v_sternberg_s3
v_sternberg_s5 ~~ s.v*v_sternberg_s5
v_hick_0bit ~~ h.v*v_hick_0bit
v_hick_1bit ~~ h.v*v_hick_1bit
v_hick_2bit ~~ h.v*v_hick_2bit
v_posner_ni ~~ p.v*v_posner_ni
v_posner_pi ~~ p.v*v_posner_pi
sternberg =~ sload.v*v_sternberg_s1 + sload.v*v_sternberg_s3 + sload.v*v_sternberg_s5
# hick =~ v_hick_0bit + v_hick_1bit + v_hick_2bit
posner =~ pload.v*v_posner_ni + pload.v*v_posner_pi
# hick ~~ 0*v
posner ~~ 0*v
sternberg ~~ 0*v
{paste(c(v_vars, ''), collapse = ' ~ 0*1\n')}
")
v_model <- sem(v_factor, data = data, std.ov = TRUE, estimator = "ML", missing = "fiml")
summary(v_model, fit.measures = TRUE, standardized = TRUE)
full_combined_model <- glue::glue(
"
{alpha_factor}
{v_factor}
{true_g_factor}
g ~~ v + alpha
sternberg ~~ posner
"
)
combined_model <- glue::glue(
"
{alpha_factor}
{true_g_factor}
g ~~ alpha
sternberg ~~ posner
"
)
v_combined_model <- glue::glue(
"
{v_factor}
{true_g_factor}
g ~~ v
sternberg ~~ posner
"
)
alpha_g <- sem(model = combined_model, data=data, std.ov =TRUE, estimator = "ML", orthogonal = TRUE)
summary(alpha_g, fit.measures = TRUE, standardized = TRUE)
summary(alpha_g, fit.measures = TRUE, standardized = TRUE)
alpha_factor <- glue::glue("
# non-decision time Model
alpha =~ {paste(alpha_vars, collapse = ' + ')}
alpha_sternberg_s1 ~~ s.alpha*alpha_sternberg_s1
alpha_sternberg_s3 ~~ s.alpha*alpha_sternberg_s3
alpha_sternberg_s5 ~~ s.alpha*alpha_sternberg_s5
alpha_hick_0bit ~~ h.alpha*alpha_hick_0bit
alpha_hick_1bit ~~ h.alpha*alpha_hick_1bit
alpha_hick_2bit ~~ h.alpha*alpha_hick_2bit
alpha_posner_ni ~~ p.alpha*alpha_posner_ni
alpha_posner_pi ~~ p.alpha*alpha_posner_pi
sternberg =~ 1*alpha_sternberg_s1 + 1*alpha_sternberg_s3 + 1*alpha_sternberg_s5
# hick =~ alpha_hick_0bit + alpha_hick_1bit + alpha_hick_2bit
posner =~ 1*alpha_posner_ni + 1*alpha_posner_pi
# hick ~~ 0*alpha
posner ~~ 0*alpha
sternberg ~~ 0*alpha
{paste(c(alpha_vars, ''), collapse = ' ~ 0*1\n')}
")
alpha_model <- sem(alpha_factor, data = data, std.ov = TRUE, estimator = "ML", missing = "fiml")
summary(alpha_model, fit.measures = TRUE, standardized = TRUE)
alpha_factor <- glue::glue("
# non-decision time Model
alpha =~ {paste(alpha_vars, collapse = ' + ')}
alpha_sternberg_s1 ~~ s.alpha*alpha_sternberg_s1
alpha_sternberg_s3 ~~ s.alpha*alpha_sternberg_s3
alpha_sternberg_s5 ~~ s.alpha*alpha_sternberg_s5
alpha_hick_0bit ~~ h.alpha*alpha_hick_0bit
alpha_hick_1bit ~~ h.alpha*alpha_hick_1bit
alpha_hick_2bit ~~ h.alpha*alpha_hick_2bit
alpha_posner_ni ~~ p.alpha*alpha_posner_ni
alpha_posner_pi ~~ p.alpha*alpha_posner_pi
sternberg =~ sload.alpha*alpha_sternberg_s1 + sload.alpha*alpha_sternberg_s3 + sload.alpha*alpha_sternberg_s5
# hick =~ alpha_hick_0bit + alpha_hick_1bit + alpha_hick_2bit
posner =~ pload.alpha*alpha_posner_ni + pload.alpha*alpha_posner_pi
# hick ~~ 0*alpha
posner ~~ 0*alpha
sternberg ~~ 0*alpha
{paste(c(alpha_vars, ''), collapse = ' ~ 0*1\n')}
")
alpha_model <- sem(alpha_factor, data = data, std.ov = TRUE, estimator = "ML", missing = "fiml")
summary(alpha_model, fit.measures = TRUE, standardized = TRUE)
alpha_factor <- glue::glue("
# non-decision time Model
alpha =~ {paste(alpha_vars, collapse = ' + ')}
alpha_sternberg_s1 ~~ s.alpha*alpha_sternberg_s1
alpha_sternberg_s3 ~~ s.alpha*alpha_sternberg_s3
alpha_sternberg_s5 ~~ s.alpha*alpha_sternberg_s5
alpha_hick_0bit ~~ h.alpha*alpha_hick_0bit
alpha_hick_1bit ~~ h.alpha*alpha_hick_1bit
alpha_hick_2bit ~~ h.alpha*alpha_hick_2bit
alpha_posner_ni ~~ p.alpha*alpha_posner_ni
alpha_posner_pi ~~ p.alpha*alpha_posner_pi
sternberg =~ 1*alpha_sternberg_s1 + 1*alpha_sternberg_s3 + 1*alpha_sternberg_s5
hick =~ 1*alpha_hick_0bit + 1*alpha_hick_1bit + 1*alpha_hick_2bit
posner =~ 1*alpha_posner_ni + 1*alpha_posner_pi
hick ~~ 0*alpha
posner ~~ 0*alpha
sternberg ~~ 0*alpha
{paste(c(alpha_vars, ''), collapse = ' ~ 0*1\n')}
")
alpha_model <- sem(alpha_factor, data = data, std.ov = TRUE, estimator = "ML", missing = "fiml")
summary(alpha_model, fit.measures = TRUE, standardized = TRUE)
combined_model <- glue::glue(
"
{alpha_factor}
{true_g_factor}
g ~~ alpha
sternberg ~~ posner
"
)
alpha_g <- sem(model = combined_model, data=data, std.ov =TRUE, estimator = "ML", orthogonal = TRUE)
summary(alpha_g, fit.measures = TRUE, standardized = TRUE)
alpha_factor <- glue::glue("
# non-decision time Model
alpha =~ {paste(alpha_vars, collapse = ' + ')}
alpha_sternberg_s1 ~~ s.alpha*alpha_sternberg_s1
alpha_sternberg_s3 ~~ s.alpha*alpha_sternberg_s3
alpha_sternberg_s5 ~~ s.alpha*alpha_sternberg_s5
alpha_hick_0bit ~~ h.alpha*alpha_hick_0bit
alpha_hick_1bit ~~ h.alpha*alpha_hick_1bit
alpha_hick_2bit ~~ h.alpha*alpha_hick_2bit
alpha_posner_ni ~~ p.alpha*alpha_posner_ni
alpha_posner_pi ~~ p.alpha*alpha_posner_pi
sternberg =~ 1*alpha_sternberg_s1 + 1*alpha_sternberg_s3 + 1*alpha_sternberg_s5
# hick =~ 1*alpha_hick_0bit + 1*alpha_hick_1bit + 1*alpha_hick_2bit
posner =~ 1*alpha_posner_ni + 1*alpha_posner_pi
# hick ~~ 0*alpha
posner ~~ 0*alpha
sternberg ~~ 0*alpha
{paste(c(alpha_vars, ''), collapse = ' ~ 0*1\n')}
")
alpha_g <- sem(model = combined_model, data=data, std.ov =TRUE, estimator = "ML", orthogonal = TRUE)
combined_model <- glue::glue(
"
{alpha_factor}
{true_g_factor}
g ~~ alpha
sternberg ~~ posner
"
)
alpha_g <- sem(model = combined_model, data=data, std.ov =TRUE, estimator = "ML", orthogonal = TRUE)
summary(alpha_g, fit.measures = TRUE, standardized = TRUE)
